<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hjc.demo.mapper.UserMapper">
    <!-- 只添加用户名-->
    <insert id="insertUserForName" parameterType="String">
        insert into user(username)
        <!-- values (#{username}) -->
        values ('${username}')
    </insert>
    <!-- mybatis如果检测有多个参数的时候，会自动把这些参数放入map集合中
        会以两种方式存取数据：
            - 以arg0 arg1为键 以参数为值
            - 以param1 param2为键 以参数为值-->
    <insert id="insertUserByMap" parameterType="map">
        insert into user(username, password, age)
        values (#{username}, #{password}, #{age})
    </insert>
    <insert id="insertUserByParam">
        insert into user(username, password, age)
        values (#{username}, #{password}, #{age})
    </insert>
    <insert id="insertUserByBean" parameterType="com.hjc.demo.pojo.User">
        insert into user(username, password, age)
        values (#{username}, #{password}, #{age})
    </insert>
    <!-- 在Mybatis实现添加功能的时候设置好了 把自动递增的主键来放到传输过来的user对象的id属性中，当执行添加操作之后，user对象的id就有值了 -->
    <!-- useGeneratedKeys：设置当前标签中的sql使用了自增的主键
         keyProperty：将自增的主键的值赋值传输到映射文件中参数的某个属性-->
    <insert id="insertUserForId" keyProperty="id" useGeneratedKeys="true">
        insert into user(username, password, age)
        values (#{username}, #{password}, #{age})
    </insert>
    <insert id="insertUserByCustom" parameterType="com.hjc.demo.pojo.User">
        <!-- 先使用selectKey标签定义主键，然后再定义SQL语句 -->
        <selectKey keyProperty="id" resultType="Integer" order="AFTER">
            select if(max(id) is null,1,max(id)+1) as newId from user
        </selectKey>
        insert into user(id,username,password,age) values (#{id},#{username},#{password},#{age})
    </insert>
    <update id="updateUserForName" parameterType="string">
        update user
        set password = '123123'
        where username = #{username}
    </update>
    <update id="updateUserByMap" parameterType="map">
        update user
        set username = #{username},
            password = #{password},
            age      = #{age}
        where id = #{id}
    </update>
    <update id="updateUserByParam">
        update user
        set username = #{username},
            password = #{password},
            age      = #{age}
        where id = #{id}
    </update>
    <update id="updateUserByBean" parameterType="com.hjc.demo.pojo.User">
        update user
        set username = #{username},
            password = #{password},
            age      = #{age}
        where id = #{id}
    </update>
    <delete id="deleteUserForName" parameterType="string">
        delete
        from user
        where username = #{username}
    </delete>
    <delete id="deleteUserByMap">
        delete
        from user
        where username = #{username}
          and password = #{password}
    </delete>
    <delete id="deleteUserByParam">
        delete
        from user
        where username = #{username}
          and password = #{password}
    </delete>
    <delete id="deleteUserByBean">
        delete
        from user
        where username = #{username}
          and password = #{password}
    </delete>
    <!-- resultType设置默认的映射关系、resultMap设置自定义的映射关系 -->
    <!-- 如果字段名和属性名不一致或多对一、一对多的情况下才需要用到resultMap，其他时候使用resultType即可 -->
    <select id="selectUserByBean" resultType="com.hjc.demo.pojo.User">
        select id, username, password, age
        from user
        where username like concat('%', #{username}, '%')
          and password like concat('%', #{password}, '%')
    </select>
    <select id="selectUserByParam" resultType="com.hjc.demo.pojo.User">
        select id, username, password, age
        from user
        where username like concat('%', #{username}, '%')
          and password like concat('%', #{password}, '%')
    </select>
    <select id="selectUserByMap" resultType="com.hjc.demo.pojo.User">
        select id, username, password, age
        from user
        where username like concat('%', #{username}, '%')
          and password like concat('%', #{password}, '%')
    </select>
    <select id="selectUserForName" resultType="com.hjc.demo.pojo.User">
        select id, username, password, age
        from user
        where username like concat('%', #{username}, '%')
    </select>
</mapper>